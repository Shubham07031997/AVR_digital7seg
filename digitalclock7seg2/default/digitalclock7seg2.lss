
digitalclock7seg2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  0000017a  000001ee  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000045  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000189  00000000  00000000  00000253  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e2  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000183  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e6  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  0000074a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000007aa  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#define F_CPU 8000000
#include<util/delay.h>
int hr,mnt,sec,units,tens;
void main()
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
   DDRA=0Xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
   DDRD=0Xff;
  a2:	81 bb       	out	0x11, r24	; 17
   DDRC=0xff;
  a4:	84 bb       	out	0x14, r24	; 20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a6:	60 ed       	ldi	r22, 0xD0	; 208
  a8:	e6 2e       	mov	r14, r22
  aa:	67 e0       	ldi	r22, 0x07	; 7
  ac:	f6 2e       	mov	r15, r22
						            }

									    mnt++;
						                units=mnt%10;
										tens=sec/10;
										PORTC=tens;
  ae:	35 e0       	ldi	r19, 0x05	; 5
int hr,mnt,sec,units,tens;
void main()
{
   DDRA=0Xff;
   DDRD=0Xff;
   DDRC=0xff;
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	10 e0       	ldi	r17, 0x00	; 0
  b4:	c1 e0       	ldi	r28, 0x01	; 1
  b6:	d0 e0       	ldi	r29, 0x00	; 0
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	16 c0       	rjmp	.+44     	; 0xea <main+0x58>
							      {
			           
					                  sec++;
					     	         units=sec%10;
					     	          tens=sec/10;
					     	          PORTD=tens;
  be:	cf 01       	movw	r24, r30
  c0:	6a e0       	ldi	r22, 0x0A	; 10
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	0e 94 94 00 	call	0x128	; 0x128 <__divmodhi4>
  c8:	62 bb       	out	0x12, r22	; 18
 					    	         PORTD |=(units<<4);
  ca:	22 b3       	in	r18, 0x12	; 18
  cc:	cf 01       	movw	r24, r30
  ce:	6a e0       	ldi	r22, 0x0A	; 10
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	0e 94 94 00 	call	0x128	; 0x128 <__divmodhi4>
  d6:	54 e0       	ldi	r21, 0x04	; 4
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	5a 95       	dec	r21
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x46>
  e0:	28 2b       	or	r18, r24
  e2:	22 bb       	out	0x12, r18	; 18
  e4:	c7 01       	movw	r24, r14
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x54>
  ea:	31 96       	adiw	r30, 0x01	; 1
			       
			     for(hr=0;hr<24;)
				     {    
					    for(mnt=0;mnt<59;)
						  {
						      for(sec=0;sec<59;)
  ec:	ec 33       	cpi	r30, 0x3C	; 60
  ee:	f1 05       	cpc	r31, r1
  f0:	31 f7       	brne	.-52     	; 0xbe <main+0x2c>
						            }

									    mnt++;
						                units=mnt%10;
										tens=sec/10;
										PORTC=tens;
  f2:	35 bb       	out	0x15, r19	; 21
										PORTC |=(units<<4);
  f4:	25 b3       	in	r18, 0x15	; 21
  f6:	ce 01       	movw	r24, r28
  f8:	6a e0       	ldi	r22, 0x0A	; 10
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	0e 94 94 00 	call	0x128	; 0x128 <__divmodhi4>
 100:	44 e0       	ldi	r20, 0x04	; 4
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	4a 95       	dec	r20
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x70>
 10a:	28 2b       	or	r18, r24
 10c:	25 bb       	out	0x15, r18	; 21
 10e:	c7 01       	movw	r24, r14
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x7e>
 114:	21 96       	adiw	r28, 0x01	; 1
      {   
	         
			       
			     for(hr=0;hr<24;)
				     {    
					    for(mnt=0;mnt<59;)
 116:	cc 33       	cpi	r28, 0x3C	; 60
 118:	d1 05       	cpc	r29, r1
 11a:	71 f6       	brne	.-100    	; 0xb8 <main+0x26>
 11c:	0f 5f       	subi	r16, 0xFF	; 255
 11e:	1f 4f       	sbci	r17, 0xFF	; 255
   
   while(1)
      {   
	         
			       
			     for(hr=0;hr<24;)
 120:	08 31       	cpi	r16, 0x18	; 24
 122:	11 05       	cpc	r17, r1
 124:	29 f2       	breq	.-118    	; 0xb0 <main+0x1e>
 126:	c6 cf       	rjmp	.-116    	; 0xb4 <main+0x22>

00000128 <__divmodhi4>:
 128:	97 fb       	bst	r25, 7
 12a:	09 2e       	mov	r0, r25
 12c:	07 26       	eor	r0, r23
 12e:	0a d0       	rcall	.+20     	; 0x144 <__divmodhi4_neg1>
 130:	77 fd       	sbrc	r23, 7
 132:	04 d0       	rcall	.+8      	; 0x13c <__divmodhi4_neg2>
 134:	0c d0       	rcall	.+24     	; 0x14e <__udivmodhi4>
 136:	06 d0       	rcall	.+12     	; 0x144 <__divmodhi4_neg1>
 138:	00 20       	and	r0, r0
 13a:	1a f4       	brpl	.+6      	; 0x142 <__divmodhi4_exit>

0000013c <__divmodhi4_neg2>:
 13c:	70 95       	com	r23
 13e:	61 95       	neg	r22
 140:	7f 4f       	sbci	r23, 0xFF	; 255

00000142 <__divmodhi4_exit>:
 142:	08 95       	ret

00000144 <__divmodhi4_neg1>:
 144:	f6 f7       	brtc	.-4      	; 0x142 <__divmodhi4_exit>
 146:	90 95       	com	r25
 148:	81 95       	neg	r24
 14a:	9f 4f       	sbci	r25, 0xFF	; 255
 14c:	08 95       	ret

0000014e <__udivmodhi4>:
 14e:	aa 1b       	sub	r26, r26
 150:	bb 1b       	sub	r27, r27
 152:	51 e1       	ldi	r21, 0x11	; 17
 154:	07 c0       	rjmp	.+14     	; 0x164 <__udivmodhi4_ep>

00000156 <__udivmodhi4_loop>:
 156:	aa 1f       	adc	r26, r26
 158:	bb 1f       	adc	r27, r27
 15a:	a6 17       	cp	r26, r22
 15c:	b7 07       	cpc	r27, r23
 15e:	10 f0       	brcs	.+4      	; 0x164 <__udivmodhi4_ep>
 160:	a6 1b       	sub	r26, r22
 162:	b7 0b       	sbc	r27, r23

00000164 <__udivmodhi4_ep>:
 164:	88 1f       	adc	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	5a 95       	dec	r21
 16a:	a9 f7       	brne	.-22     	; 0x156 <__udivmodhi4_loop>
 16c:	80 95       	com	r24
 16e:	90 95       	com	r25
 170:	bc 01       	movw	r22, r24
 172:	cd 01       	movw	r24, r26
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
